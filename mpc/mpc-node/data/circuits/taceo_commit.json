{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14172765154398397036,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"meta","type":{"kind":"struct","path":"pss_utils::private_state::CommitMetaData","fields":[{"name":"data","type":{"kind":"array","length":1,"type":{"kind":"field"}}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7WS0QrDIAxF1bXbnvclidEa3/Yrk9n//4IxpRZCZS9reyDkKijXa7RauJcaVI9u/dk6weRcDjYj4QtsTOzB+TQxMnr2b8tEmR2HmGKAiI4yzj7SDAsXcRfsA8/0Ofzvk7Yb1dtD5FvXNYeP8L1qLfTQ9HpuLHUtdfvxX2aTAewDzYF5jsf5Ai3eblQ/A1Ib1fMFnpCDi/QCAAA=","debug_symbols":"7ZPNCoMwEITfZc8e8qNu9VVKkahRAiFK1EIR371RTBUqLXj2ltn5MiwDO0Ip86HOlKmaDtL7CLopRK8a49QIZBl1rTCz6nphe0gpwwCkKd0riqcAKqUlpDGdgi+U8TBcWcYx3GA8gCnhiQ8mN9xgfgDzKF7ZkJEPyqKjJZD6XIac/4Ypog+mmER/YEK3jePbHn4EQK/yzpfHrvLOludEbpXWqs72x+zGT2GVyLVcZTWYYuf2r9Y7/n9rm0KWg5Vz0uK5+Dc=","file_map":{"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"61":{"source":"use pss_utils::{private_state::{CommitMetaData, PrivateState}};\n\nfn main(x: Field, meta: CommitMetaData<1>) -> pub Field {\n    PrivateState::commit(x, meta)\n}\n\n","path":"/home/fnieddu/repos/monty-hall-aztec/noir_logic/taceo_commit/src/main.nr"},"63":{"source":"// Follows the SAFE API [https://eprint.iacr.org/2023/522.pdf](https://eprint.iacr.org/2023/522.pdf)\n// It is not used in the Aztec infrastructure\npub struct Commit {}\n\nimpl Commit {\n    fn absorb(data: Field, state: &mut [Field; 4], position: &mut Field) {\n        if *position == 3 {\n            *state = std::hash::poseidon2_permutation(*state, 4);\n            *position = 0;\n        }\n        state[*position] += data;\n        *position += 1;\n    }\n\n    pub(crate) fn commit_field_array<let N: u32>(data: [Field; N]) -> Field {\n        let d = 0x4142;\n        let absorb = 0x80000000 + N as Field;\n        let squeeze = 1;\n        let t = d + squeeze * 65536 + absorb * 281474976710656;\n        let mut state = [0, 0, 0, t];\n        let mut position = 0;\n\n        // Absorb\n        for i in 0..N {\n            Self::absorb(data[i], &mut state, &mut position);\n        }\n\n        // Squeeze\n        std::hash::poseidon2_permutation(state, 4)[0]\n    }\n\n    pub(crate) fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n        std::hash::poseidon2::Poseidon2::hash(inputs, N)\n    }\n}\n","path":"/home/fnieddu/repos/monty-hall-aztec/noir_logic/pss_utils/src/commit.nr"},"67":{"source":"use super::commit::Commit;\n\nfn array_concat<T, let N: u32, let M: u32>(\n    separator: T,\n    array1: [T; N],\n    array2: [T; M],\n) -> [T; N + M + 1] {\n    let mut result = [separator; N + M + 1];\n    for i in 0..N {\n        result[i + 1] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N + 1] = array2[i];\n    }\n    result\n}\n\n// In the Aztec infrastrucutre it is the owners address and the storage slot, i.e., [owner, storage_slot]\n// The MPC network however only adds a random value alongside the data, since we do not have the concept of storage slots\npub struct CommitMetaData<let N: u32> {\n    pub(crate) data: [Field; N],\n}\n\npub struct PrivateState<D, let N: u32> {\n    pub(crate) data: D,\n    pub(crate) meta: CommitMetaData<N>,\n    pub commitment: Field,\n}\n\npub trait PrivateStateTrait {\n    let N: u32;\n\n    fn as_field_array(self) -> [Field; Self::N];\n}\n\nimpl<D, let N: u32> PrivateState<D, N>\nwhere\n    D: PrivateStateTrait,\n{\n\n    // Required to have commitments as public inputs to the main function\n    pub fn from_data_and_commitment(\n        data: D,\n        meta: CommitMetaData<N>,\n        commitment: Field,\n    ) -> PrivateState<D, N> {\n        PrivateState { data, meta, commitment }\n    }\n\n    pub fn new(data: D, meta: CommitMetaData<N>) -> PrivateState<D, N> {\n        let commitment = Self::commit(data, meta);\n        PrivateState { data, meta, commitment }\n    }\n\n    pub fn verify(self) -> D {\n        let calc_commitment = Self::commit(self.data, self.meta);\n        // println(calc_commitment);\n        assert(self.commitment == calc_commitment);\n        self.data\n    }\n\n    // Returns the data and the nullifier\n    pub fn verify_and_nullify(self, secret_key: Field) -> (D, Field) {\n        let data = self.verify();\n        let nullifier = PrivateState::<D, N>::compute_nullifier(self.commitment, secret_key);\n        (data, nullifier)\n    }\n\n    // Aztec compatible: [https://docs.aztec.network/aztec/smart_contracts/functions/attributes#implementing-notes](https://docs.aztec.network/aztec/smart_contracts/functions/attributes#implementing-notes)\n    pub fn commit(data: D, meta: CommitMetaData<N>) -> Field {\n        let GENERATOR_INDEX__NOTE_HASH: u32 = 1;\n\n        let data = data.as_field_array();\n        let packed = array_concat(GENERATOR_INDEX__NOTE_HASH as Field, data, meta.data);\n        Commit::poseidon2_hash(packed)\n    }\n\n    // Aztec compatible: [https://docs.aztec.network/aztec/smart_contracts/functions/attributes#implementing-notes](https://docs.aztec.network/aztec/smart_contracts/functions/attributes#implementing-notes)\n    pub fn compute_nullifier(commitment: Field, secret_key: Field) -> Field {\n        let GENERATOR_INDEX__NOTE_NULLIFIER: u32 = 53;\n\n        let packed = [GENERATOR_INDEX__NOTE_NULLIFIER as Field, commitment, secret_key];\n        Commit::poseidon2_hash(packed)\n    }\n}\n\nimpl PrivateStateTrait for Field {\n    let N: u32 = 1;\n\n    fn as_field_array(self) -> [Field; Self::N] {\n        [self]\n    }\n}\n\nimpl PrivateStateTrait for u8 {\n    let N: u32 = 1;\n\n    fn as_field_array(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl PrivateStateTrait for bool {\n    let N: u32 = 1;\n\n    fn as_field_array(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n","path":"/home/fnieddu/repos/monty-hall-aztec/noir_logic/pss_utils/src/private_state.nr"}},"names":["main"],"brillig_names":[]}